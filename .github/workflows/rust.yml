name: Build

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set environment variables
        run: |
          echo "API_URL=${{ secrets.API_URL }}" >> $GITHUB_ENV
          echo "API_PORT=${{ secrets.API_PORT }}" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "CORS_ALLOWED_URL=${{ secrets.CORS_ALLOWED_URL }}" >> $GITHUB_ENV

      - name: Run tests
        run: cargo test --verbose --jobs 5
        env:
          API_URL: http://localhost
          API_PORT: 6988

  build:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-

      - name: Cache SQLx CLI
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/sqlx
          key: ${{ runner.os }}-sqlx-cli-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sqlx-cli-

      - name: Install SQLx CLI
        run: |
          if ! command -v sqlx &> /dev/null; then
            cargo install sqlx-cli
          else
            echo "SQLx CLI is already installed"
          fi

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV

      - name: Build
        run: cargo build --release --verbose

      - name: Run database migrations
        run: |
          sqlx migrate run
