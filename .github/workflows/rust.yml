name: Build

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - uses: actions/checkout@v4

      # Step 2: Cache Cargo dependencies
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Step 3: Cache target directory
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-

      # Step 4: Cache SQLx CLI installation
      - name: Cache SQLx CLI
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/sqlx
          key: ${{ runner.os }}-sqlx-cli-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sqlx-cli-

      # Step 5: Install SQLx CLI
      - name: Install SQLx CLI
        run: |
          if ! command -v sqlx &> /dev/null; then
            cargo install sqlx-cli
          else
            echo "SQLx CLI is already installed"
          fi

      # Step 6: Set environment variable
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV

      # Step 7: Build the project
      - name: Build
        run: cargo build --release --verbose

      # Step 8: Run database migrations (if needed)
      - name: Run database migrations
        run: |
          sqlx migrate run

      # Step 9: Verify that the build generated the expected files
      - name: List built files
        run: ls -alh target/release

      # Step 10: Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustpress_api
          path: target/release/rustpress_api

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Check out the code from the repository
      - uses: actions/checkout@v4

      # Step 2: Download build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rustpress_api
          path: ./target/release/

      # Step 3: Set environment variable
      - name: Set environment variables
        run: |
          echo "API_URL=${{ secrets.API_URL }}" >> $GITHUB_ENV
          echo "API_PORT=${{ secrets.API_PORT }}" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "CORS_ALLOWED_URL=${{ secrets.CORS_ALLOWED_URL }}" >> $GITHUB_ENV

      # Step 4: Start the API server in the background
      - name: Run API server in background
        run: |
          ./target/release/rustpress_api &
          echo "Waiting for the API to be ready on port 6988..."
          for i in {1..24}; do
            nc -zv localhost 6988 && echo "API is ready" && break
            echo "Still waiting for API..." && sleep 5
          done || { echo "API did not start"; exit 1; }

      # Step 5: Run the tests
      - name: Run tests
        run: cargo test --verbose --jobs 5
        env:
          API_URL: http://localhost
          API_PORT: 6988
